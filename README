Search within binary files for a pattern and output the found offsets (similar to grep). You can search using a text string, hexidecimal string, or a smaller binary file.

Syntax:
searchbin.py -t PATTERN [FILE [FILE...]]
searchbin.py -p PATTERN [FILE [FILE...]]
searchbin.py -f FILE    [FILE [FILE...]]


Examples:
python searchbin.py -t "Tom" myfile.exe
Searches for the text string "Tom" in myfile.exe. Text is case sensitive.

python searchbin.py -t "T?m" myfile.exe
Searches for the text string "T?m" in myfile.exe, where ? is a wildcard. This will match "Tom" "Tim" "Twm" and all other variations, including non-printing bytes.

python searchbin.py -p "CCDDFF" myfile.exe
Searches for the hexidecimal pattern "CCDDFF" in myfile.exe.

python searchbin.py -p "CC??FF" myfile.exe
Searches for the hexidecimal pattern "CC??FF" in myfile.exe, where ?? can be any byte value.

python searchbin.py -f pattern.bin myfile.exe
Takes the binary file pattern.bin, and searches for an exact match within myfile.exe.

python searchbin.py -h
Shows all optional program arguments.


Optional Arguments:
  -h, --help            show help message and exit
  -f FILE, --file FILE  file to read search pattern from
  -t PATTERN, --text PATTERN
                        a (non-unicode case-sensitive) text string to search
                        for
  -p PATTERN, --pattern PATTERN
                        a hexidecimal pattern in format '0xFF'
  -b NUM, --buffer-size NUM
                        read buffer size (in bytes). 8MB default
  -s NUM, --start NUM   starting position in file to begin searching
  -e NUM, --end NUM     end search at this position, measuring from beginning
                        of file
  -m NUM, --max-count NUM
                        maximum number of matches to find
  -l FILE, --log FILE   write matched offsets to FILE, instead of standard
                        output
  -v, --verbose         verbose, output the number of bytes searched after
                        each buffer read
  -V, --version         print version information


An argument -t or -p or -f is required. The -p argument accepts a 
hexidecimal pattern string and allows for missing characters, 
such as 'FF??FF'. When using -f argument, the pattern file will 
be read as a binary file (not hex strings). If no search files are 
specified, %prog will read from standard input. The minimum memory 
required is about 3 times the size of the pattern byte length. 
Increasing buffer-size will increase program search speed for 
large search files. All size arguments (-b -s -e) are read in decimal 
format, for example: '-s 1024' will start searching after 1kilobyte.
Reported finds are 0-based offset.

+Minimum Py2.7 (argparse library)
+Features: no compiling, less code, search in files of unlimited size, similar in usage to grep
+keywords: hex hexidecimal binary like grep search seek find fast


Please report bugs & feature requests to  sepero 111 @ gmail . com
  or https://github.com/Sepero/SearchBin/issues/new
  or http://seperohacker.blogspot.com/2012/04/binary-grep-program-searchbin.html

